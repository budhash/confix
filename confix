#!/bin/bash
# --------------------------------------------------------------------
#
# confix - pure bash script to modify/update configuration files
#
# --------------------------------------------------------------------
# AUTHOR:   Copyright (C) Budhaditya Das <budhash@gmail.com>
# VERSION:  0.7
# --------------------------------------------------------------------
# DESCRIPTION:
#
# pure bash script to modify/update configuration files 
# --------------------------------------------------------------------
# LICENSE:
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# --------------------------------------------------------------------
# USAGE:
#
# Type "confix -h" for usage guidelines.
# --------------------------------------------------------------------

## begin ## meta-data
readonly __APPNAME=$( basename "${BASH_SOURCE[0]}" )
readonly __APPVERSION=0.7
readonly __SUPPORTED_OS=(MAC LINUX-DEBIAN)
readonly __SUPPORTED_ARCH=(x86_64 x86)
readonly __DEBUG=FALSE
## end ## meta-data

##
# @info     logging functions
##
function _common.log() { echo "[info]: $@" 1>&2; }
function _common.log_linebreak() { echo "" 1>&2; }
function _common.warn() { echo "[warn]: $@" 1>&2; }
function _common.error() { echo "[error]: $@" 1>&2; }
function _common.error_exit() { echo "[error]: $@" 1>&2; exit 1;}
function _common.debug () { [ "$__DEBUG" == "TRUE" ] && echo "[debug]: $@" 1>&2; }

##
# @info     string functions
##
function _common.trimall() { echo $(echo "$@" | tr -d '[ \t]' | tr 'A-Z' 'a-z'); }
function _common.lowercase() { echo "$@" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"; }
function _common.uppercase() { echo "$@" | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"; }
function _common.join_by() { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

function __bootstrap(){	
    readonly __BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	readonly __BASEDIRNAME=$( basename "$__BASEDIR" )
	readonly __TIMESTAMP=$(date +%m-%d-%Y_%H-%M_%S)

	if sed -c 2>&1 | grep -q invalid; then
	    __SED=sed
	else
	    __SED="sed -c "
	fi
}

function _usage()
{
    if [ "$1" != "error" ]; then
        echo "$__APPNAME $__APPVERSION, pure bash script to modify/update configuration files"
    fi
    cat << EOF
Usage: $__APPNAME [OPTIONS]... [commands1] [commands2]
Options:
-------
    -h                          
        show this message
        
    -f <file_name>           
    	name of the file that needs to be modified
        
    -s <separator_character>            
        default value is "="
        
    -c <comment_character>                            
        default value is "#"
        
Examples:
--------
	- remove (comment out) an existing config element
	$__APPNAME -c '#' -s':' -f cassandra.yaml "<gc_warn_threshold_in_ms"

	- uncomment an existing config element (no action if the config key does not exist)
	$__APPNAME -s':' -f cassandra.yaml ">concurrent_compactors"

	- add a new config to the end of the file
	$__APPNAME -s':' -f cassandra.yaml ">new_param=/some/val"

	- update the value of an existing config element
	$__APPNAME -s':' -f cassandra.yaml "gc_warn_threshold_in_ms=2001"

	- multiple commands
	$__APPNAME -s':' -f cassandra.yaml "gc_warn_threshold_in_ms=2001" ">concurrent_compactors" "commitlog_directory=/change/commitlog"
    
EOF
    if [ "$1" == "error" ]; then
        exit 1
    fi
}

function _main(){
    __bootstrap 
	local _param=
	local _rootConfig=${__BASECFG}
	__file_name="-"
	__sep_char="="
	__comment_char="#"
	_mode=u
	_PARAMS=

	while getopts "hf:s:c:a:u:r:" OPTION
    do
         case "$OPTION" in
	 		 f) __file_name=$OPTARG;;
			 s) __sep_char=$OPTARG;;
			 c) __comment_char=$OPTARG;;
			 h) _usage;;
             ?) _usage error;;
         esac
    done
	shift $((OPTIND-1))
    while test ${#} -gt 0
	do
	  _change_config "$1"
	  shift
	done
}

function _change_config(){
	local _cmd="$@"

	if [[ $_cmd == ">"* ]]; then
	    _add_config ${_cmd#">"}
	elif [[ $_cmd == "<"* ]]; then
		_remove_config ${_cmd#"<"}
	else		
		_update_config $_cmd
	fi	
}

function _update_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]}
	_cmd_param=( "${_cmd_param[@]:1}" ) 
    local _val=$(_common.join_by '=' ${_cmd_param[@]})
    if [[ "$_val" ==  *\/* ]] ; then
	  $__SED -i "s#\($_key *: *\).*#\1$_val#" $__file_name
	else
	  $__SED -i "s/\($_key *: *\).*/\1$_val/" $__file_name
	fi
}

function _add_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]} 
	_cmd_param=( "${_cmd_param[@]:1}" ) 
    local _val=`_common.join_by '=' ${_cmd_param[@]}`
	if [ -z "$_val" ]; then
	    __remove_comment "$_key"
	else
		echo "" >> $__file_name
		echo "$_key$__sep_char$_val" >> $__file_name
	fi
}

function _remove_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]}
	if [ "$(__exists_config "$_key")" -eq "1" ]; then
	    __add_comment "$_key"
	fi	
}

function __add_comment(){
	[[ -z "$1" ]] && return	|| local _key="$1"
    $__SED -i "/$_key[ ]*$__sep_char/s/^/$__comment_char/" $__file_name
}

function __remove_comment(){
	[[ -z "$1" ]] && return	|| local _key="$1"
    $__SED -i "s/^[ #]*\($_key[ ]*$__sep_char\)/\1/" $__file_name
}

function __exists_config(){
	[[ -z "$1" ]] && return	|| local _key="$1"
	if grep -q "^[ ]*$_key[ ]*$__sep_char" $__file_name; then
		#exists uncommented
		echo 1
	elif grep -q "^[ #]*$_key[ ]*$__sep_char" $__file_name; then
		#exists commented
		echo 2
	else
		#doesn't exist
		echo 0
	fi
}

#trap _cleanup 1 2 3 4 6 8 10 12 13 15
_main $@
exit 0