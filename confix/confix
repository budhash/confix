readonly __APPNAME=$( basename "${BASH_SOURCE[0]}" )
readonly __DEBUG=FALSE

function _join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

function __bootstrap(){	
    readonly __BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	readonly __BASEDIRNAME=$( basename "$__BASEDIR" )
    readonly __BASECFG=base.ini
	readonly __TIMESTAMP=$(date +%m-%d-%Y_%H-%M_%S)
	readonly __RESULTDIR=$__BASEDIR/results
	__include "${__BASEDIR}/_common"
	__include "${__BASEDIR}/_props"
	
	if sed -c 2>&1 | grep -q invalid; then
	    __SED=sed
	else
	    __SED="sed -c "
	fi
	#_common.debug $__SED
}

function __include(){
	[[ -z "$1" ]] && return	|| local _lib=$1
	
	local _pwd=$PWD
    cd "$(dirname "$_lib")"
    local _link=$(readlink "$(basename "$_lib")")
    while [ "$_link" ]; do
      cd "$(dirname "$_link")"
      _link=$(readlink "$(basename "$_lib")")
    done
    local _absPath="$PWD/$(basename "$_lib")"
    cd "$_pwd"

	[ -f $_absPath ] && source $_absPath || { echo "[error]: library not found : $_absPath" 1>&2; exit 1;}
}

function _main(){
    __bootstrap 
	local _param=
	local _rootConfig=${__BASECFG}
	__file_name="-"
	__sep_char="="
	__comment_char="#"
	_mode=u
	_PARAMS=

	while getopts "f:s:c:a:u:r:" OPTION
    do
         case "$OPTION" in
	 		 f) __file_name=$OPTARG;;
			 s) __sep_char=$OPTARG;;
			 c) __comment_char=$OPTARG;;
             ?) _usage error;;
         esac
    done
	shift $((OPTIND-1))
    while test ${#} -gt 0
	do
	  _mod_config "$1"
	  shift
	done
	
    #

	#if [ "$#" -lt 1 ] ; then
	#	_common.error_exit "illegal number of parameters"
	#else
	#	local _key="$1"
	#	shift 1
	#fi
	
	#local _val="$1"
	#_common.debug "separator->$__sep_char | comment->$__comment_char | add_if_missing->$__add_if_missing | __file_name-> $__file_name | key->$_key | value->$_val" 
	
	#if [ "$_remove_key" == "true" ]; then
	#	_remove_config "$_key"
	#else
	#	_add_config "$_key" "$_val"
	#fi
}

function _mod_config(){
	local _cmd="$@"

	if [[ $_cmd == ">"* ]]; then
	    _add_config ${_cmd#">"}
	elif [[ $_cmd == "<"* ]]; then
		_remove_config ${_cmd#"<"}
	else		
		_update_config $_cmd
	fi	
}

function _update_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]}
	_cmd_param=( "${_cmd_param[@]:1}" ) 
    local _val=`_join_by '=' ${_cmd_param[@]}`
    echo _update_config $_key $_val
}

function _add_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]} 
	_cmd_param=( "${_cmd_param[@]:1}" ) 
    local _val=`_join_by '=' ${_cmd_param[@]}`
	
	if [ -z "$_val" ]; then
	    __remove_comment "$_key"
	else
		echo "$_key$__sep_char$_val" >> $__file_name
	fi
			
	return
	[[ -z "$1" ]] && return	|| local _key="$1"
	local _val=$2
	_common.debug "_add_config-> key->$_key | value->$_val"
	#|| [[ "$_val" == *\\* ]]
	
	if [[ "$_val" ==  *\/* ]] ; then
	  $__SED -i "s#\($_key *: *\).*#\1$_val#" $__file_name
	else
	  $__SED -i "s/\($_key *: *\).*/\1$_val/" $__file_name
	fi
}

function _remove_config(){
    local _cmd_param=(${1//=/ })
    local _key=${_cmd_param[0]}
	if [ "$(_exists_config "$_key")" -eq "1" ]; then
	    __add_comment "$_key"
	fi	
}

function __add_comment(){
	[[ -z "$1" ]] && return	|| local _key="$1"
    $__SED -i "/$_key[ ]*$__sep_char/s/^/$__comment_char/" $__file_name
}

function __remove_comment(){
	[[ -z "$1" ]] && return	|| local _key="$1"
    $__SED -i "s/^[ #]*\($_key[ ]*$__sep_char\)/\1/" $__file_name
}

function _exists_config(){
	[[ -z "$1" ]] && return	|| local _key="$1"
	if grep -q "^[ ]*$_key[ ]*$__sep_char" $__file_name; then
		#exists uncommented
		echo 1
	elif grep -q "^[ #]*$_key[ ]*$__sep_char" $__file_name; then
		#exists commented
		echo 2
	else
		#doesn't exist
		echo 0
	fi
		
		
	#_common.log "_exists_config-> key->$_key" 
}

#trap _cleanup 1 2 3 4 6 8 10 12 13 15
_main $@
exit 0

#sed -i "s/\($1 *: *\).*/\1$2/" ./cassandra.yaml
if grep -q PATTERN file.txt; then
    echo found
else
    echo not found
fi